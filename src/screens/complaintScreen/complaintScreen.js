import React, {useState} from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Image,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import {Picker} from '@react-native-picker/picker';
import {launchCamera} from 'react-native-image-picker';
import Modal from 'react-native-modal';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

import Header from '../../components/header/header'; // Your existing header component

const ComplaintScreen = ({navigation}) => {
  const [date, setDate] = useState('23-10-2021');
  const [complainantName, setComplainantName] = useState('');
  const [mobileNumber, setMobileNumber] = useState('');
  const [problemType, setProblemType] = useState('');
  const [imageUri, setImageUri] = useState(null);

  // Function to handle camera
  const openCamera = () => {
    const options = {
      mediaType: 'photo',
      quality: 0.8,
      cameraType: 'back',
    };

    launchCamera(options, response => {
      if (!response.didCancel && !response.errorCode) {
        setImageUri(response.assets[0].uri);
      }
    });
  };

  const openCameraForVideo = () => {
    const options = {
      mediaType: 'video',
      videoQuality: 'high',
      durationLimit: 10, // Now limited to 10 seconds
    };
  
    launchCamera(options, (response) => {
      if (!response.didCancel && !response.errorCode) {
        setVideoUri(response.assets[0].uri);
      }
    });
  };
  

  // Function to submit complaint
  const handleSubmit = () => {
    if (!complainantName || !mobileNumber || !problemType) {
      Alert.alert('‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç');
      return;
    }

    const complaintData = {
      date,
      complainantName,
      mobileNumber,
      problemType,
      imageUri,
    };

    console.log('Complaint Data:', complaintData);
    Alert.alert('‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú', '‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞ ‡§≤‡•Ä ‡§ó‡§à‡•§');
  };

  return (
    <View style={{flex: 1, backgroundColor: '#f5f5f5'}}>
      <Header title="‡§Æ‡§π‡§ø‡§≤‡§æ ‡§¨‡•Ä‡§ü" />

      <ScrollView contentContainerStyle={styles.container}>
        <View style={styles.headingContainer}>
          <TouchableOpacity onPress={() => navigation.navigate('VisitDetails')}>
            <Icon name="arrow-left" size={20} />
          </TouchableOpacity>
          <Text style={styles.heading}>‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£</Text>
        </View>
        {/* Complaint Date */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï</Text>
          <Text style={styles.dateBox}>{date}</Text>
        </View>

        {/* Name Input */}
        <View style={styles.inputSection}>
          <Text style={styles.label}>‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ</Text>
          <TextInput
            style={styles.input}
            value={complainantName}
            onChangeText={setComplainantName}
            placeholder="‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç"
          />
        </View>

        {/* Mobile Number Input */}
        <View style={styles.inputSection}>
          <Text style={styles.label}>‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞</Text>
          <TextInput
            style={styles.input}
            value={mobileNumber}
            onChangeText={setMobileNumber}
            placeholder="‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç"
            keyboardType="numeric"
          />
        </View>

        <View style={styles.inputSection}>
          <Text style={styles.label}>‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞</Text>
          <View style={styles.pickerContainer}>
            <Picker
              selectedValue={problemType}
              onValueChange={itemValue => setProblemType(itemValue)}
              style={styles.picker}
              dropdownIconColor="black">
              <Picker.Item label="‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç" value="" />
              <Picker.Item
                label="‡§∏‡•ç‡§ï‡•Ç‡§≤ / ‡§ï‡•â‡§≤‡•á‡§ú ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§≤‡§°‡§º‡§ï‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§õ‡•á‡§°‡§º‡§õ‡§æ‡§°‡§º"
                value="Eve teasing"
              />
              <Picker.Item label="‡§ò‡§∞‡•á‡§≤‡•Ç ‡§π‡§ø‡§Ç‡§∏‡§æ" value="Domestic Violence" />
              <Picker.Item label="‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ" value="Other" />
            </Picker>
          </View>
        </View>

        {/* Image Upload Section */}
        <View style={styles.inputSection}>
          <Text style={styles.label}>‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ / ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£</Text>
          <TouchableOpacity
            style={styles.imageUploadButton}
            onPress={openCamera}>
            <Text style={styles.buttonText}>üì∑ ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç</Text>
          </TouchableOpacity>

          {imageUri && (
            <Image source={{uri: imageUri}} style={styles.uploadedImage} />
          )}
        </View>
        <View style={styles.inputSection}>
          <Text style={styles.label}>
            ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§∏‡•á ‡§∏‡§Æ‡•ç‡§¨‡§Ç‡§ß‡§ø‡§§ 10 ‡§∏‡•á‡§ï ‡§ï‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã
          </Text>

          {imageUri ? (
            <Image source={{uri: imageUri}} style={styles.videoThumbnail} />
          ) : null}

          <TouchableOpacity
            style={styles.videoUploadButton}
            onPress={openCameraForVideo}>
            <Text style={styles.buttonText}>üìπ Video</Text>
          </TouchableOpacity>
        </View>

        {/* Submit Button */}
        <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}>
          <Text style={styles.submitButtonText}>‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç</Text>
        </TouchableOpacity>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: '4%',
    gap: 20,
  },
  headingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 85,
  },
  heading: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#333',
  },
  section: {
    backgroundColor: '#ff4081',
    padding: 10,
    borderRadius: 8,
    marginBottom: 10,
  },
  sectionTitle: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  dateBox: {
    backgroundColor: 'white',
    padding: 10,
    borderRadius: 5,
    textAlign: 'center',
    marginTop: 5,
  },
  inputSection: {
    marginBottom: 15,
  },
  label: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    backgroundColor: 'white',
  },
  pickerContainer: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    backgroundColor: 'white',
  },
  picker: {
    height: 50,
    color: 'black',
  },
  imageUploadButton: {
    backgroundColor: '#ff4081',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
  },
  uploadedImage: {
    width: '100%',
    height: 200,
    marginTop: 10,
    borderRadius: 5,
  },
  videoThumbnail: {
    width: '100%',
    height: 180,
    borderRadius: 8,
    marginBottom: 10,
  },
  
  videoUploadButton: {
    backgroundColor: '#ff4081', // Matching pink color as in your UI
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
  },
  
  submitButton: {
    backgroundColor: '#ff4081',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
  },
  submitButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default ComplaintScreen;
